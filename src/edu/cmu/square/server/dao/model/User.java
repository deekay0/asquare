package edu.cmu.square.server.dao.model;

// Generated May 17, 2009 5:07:01 PM by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import edu.cmu.square.client.model.GwtUser;


/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user")
public class User implements java.io.Serializable
{
	private static final long serialVersionUID = -3172892397409522313L;
	
	private Set<Role> roles = new HashSet<Role>();  
	private Integer id;
	private String userName;
	private String password;
	private boolean isAdmin;
	private boolean skipTeachStep;
	private String fullName;
	private String email;
	private String phone;
	private boolean isLocked;
	
	private boolean authenticated;

	private String organization;
	private String department;
	private String location;
	private Date dateCreated;
	private Date dateModified;

	private Set<UserAhp> userAhps = new HashSet<UserAhp>(0);
	private Set<Project> projects = new HashSet<Project>(0);
//	private Set<UserProjectRole> userProjectRoles = new HashSet<UserProjectRole>(
//			0);

	public User()
	{
		
	}
	
	public User(GwtUser gwtUser, String password)
	{
		this.id = gwtUser.getUserId();
		this.userName = gwtUser.getUserName();
		this.fullName = gwtUser.getFullName();
		this.password = password;
		this.isAdmin = gwtUser.getIsAdmin();
		this.isLocked = gwtUser.isLocked();
		this.email = gwtUser.getEmailAddress();
		this.phone = gwtUser.getPhone();
		this.organization = gwtUser.getOrganization();
		this.department = gwtUser.getDepartment();
		this.location = gwtUser.getLocation();
		this.skipTeachStep=gwtUser.isSkipTeachStep();

		
		this.id = gwtUser.getUserId();
	}

	public User(String username, String password, String fullName,
			String email, String phone, String organization, String department,
			String location, String avatar, Date dateCreated, Date dateModified) {
		this.userName = username;
		this.password = password;
		this.fullName = fullName;
		this.email = email;
		this.phone = phone;
		this.organization = organization;
		this.department = department;
		this.location = location;
		this.dateCreated = dateCreated;
		this.dateModified = dateModified;
	}
	public User(String username, String password, String fullName,
			String email, String phone, String organization, String department,
			String location, String avatar, Date dateCreated, Date dateModified, boolean skipTeachStep) {
		this.userName = username;
		this.password = password;
		this.fullName = fullName;
		this.email = email;
		this.phone = phone;
		this.organization = organization;
		this.department = department;
		this.location = location;
		this.skipTeachStep=skipTeachStep;
		this.dateCreated = dateCreated;
		this.dateModified = dateModified;
	}

	public User(String username, String password, String fullName,
			String email, String phone, String organization, String department,
			String location, String avatar, Date dateCreated,
			Date dateModified,
			Set<UserAhp> userAhps, Set<Project> projects
			) {
		this.userName = username;
		this.password = password;
		this.fullName = fullName;
		this.email = email;
		this.phone = phone;
		this.organization = organization;
		this.department = department;
		this.location = location;
		this.dateCreated = dateCreated;
		this.dateModified = dateModified;
		this.userAhps = userAhps;
		this.projects = projects;
//		this.userProjectRoles = userProjectRoles;
	}

	public User(GwtUser user)
		{
			this(user, null);
		}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public boolean authentication() {
		return authenticated;
	}
	public void setAuthentication(boolean authentication) {
		this.authenticated=authentication;
	}
	
	@Column(name = "locked", nullable = false)
	public boolean isLocked() {
		return isLocked;
	}

	public void setLocked(boolean locked) {
		this.isLocked = locked;
	}
	
	@Column(name = "username", nullable = false, length = 100)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String username) {
		this.userName = username;
	}

	@Column(name = "password", nullable = false, length = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	@Column(name = "isAdmin", nullable = false, length = 1)
	public boolean getIsAdmin()
	{
		return this.isAdmin;
	}

	public void setisAdmin(boolean value)
	{
		this.isAdmin = value;
	}

	@Column(name = "skip_teach_step", nullable = false, length = 1)
	public boolean getSkipTeachStep()
	{
		return this.skipTeachStep;
	}

	public void setSkipTeachStep(boolean value)
	{
		this.skipTeachStep = value;
	}

	@Column(name = "full_name", nullable = false, length = 100)
	public String getFullName() {
		return this.fullName;
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	@Column(name = "email", nullable = false, length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "phone", nullable = true)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "organization", nullable = true, length = 100)
	public String getOrganization() {
		return this.organization;
	}

	public void setOrganization(String organization) {
		this.organization = organization;
	}

	@Column(name = "department", nullable = true, length = 100)
	public String getDepartment() {
		return this.department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	@Column(name = "location", nullable = true, length = 100)
	public String getLocation() {
		return this.location;
	}

	public void setLocation(String location) {
		this.location = location;
	}


	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_created", nullable = false, length = 19)
	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_modified", nullable = false, length = 19)
	public Date getDateModified() {
		return this.dateModified;
	}

	public void setDateModified(Date dateModified) {
		this.dateModified = dateModified;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserAhp> getUserAhps() {
		return this.userAhps;
	}

	public void setUserAhps(Set<UserAhp> userAhps) {
		this.userAhps = userAhps;
	}

	@ManyToMany(
	        cascade = {CascadeType.PERSIST, CascadeType.MERGE},
	        mappedBy = "users",
	        targetEntity = Project.class
	    )
	public Set<Project> getProjects() {
		return this.projects;
	}

	public void setProjects(Set<Project> projects) {
		this.projects = projects;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
//	public Set<UserProjectRole> getUserProjectRoles() {
//		return this.userProjectRoles;
//	}
//
//	public void setUserProjectRoles(Set<UserProjectRole> userProjectRoles) {
//		this.userProjectRoles = userProjectRoles;
//	}

	/**
	 * //Assume that first word separated by spaces if the first name //and the
	 * last word separated by spaces is the last name.
	 * Assume that each user has only one role per project.
	 * @return A GwtUser version of this User
	 */
	public GwtUser createGwtUser()
	{
		GwtUser newUser = new GwtUser();
		
		newUser.setUserId(this.id);
		newUser.setFullName(this.fullName);
		newUser.setEmailAddress(this.email);
		newUser.setIsAdmin(this.isAdmin);		
		newUser.setUserName(this.userName);
		newUser.setIsLocked(this.isLocked);
		newUser.setPhone(this.phone);
		newUser.setOrganization(this.organization);
		newUser.setDepartment(this.department);
		newUser.setLocation(this.location);
		newUser.setSkipTeachStep(this.skipTeachStep);
					
		//newUser.set
		return newUser;
	}
	
	 @ManyToMany(fetch = FetchType.EAGER)
	  @JoinTable(name = "user_project_role",
	    joinColumns = {
	      @JoinColumn(name="user_id")           
	    },
	    inverseJoinColumns = {
	      @JoinColumn(name="role_id")
	    }
	  ) 
	public Set<Role> getRoles()
	{
		return roles;
	}

	public void setRoles(Set<Role> roles)
	{
		this.roles = roles;
	}
	
}
