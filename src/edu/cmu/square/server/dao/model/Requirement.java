package edu.cmu.square.server.dao.model;

// Generated May 17, 2009 5:07:01 PM by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import edu.cmu.square.client.model.GwtArtifact;
import edu.cmu.square.client.model.GwtCategory;
import edu.cmu.square.client.model.GwtRequirement;
import edu.cmu.square.client.model.GwtRisk;
import edu.cmu.square.client.model.GwtSubGoal;

/**
 * Requirement generated by hbm2java
 */
@Entity
@Table(name = "requirement")
public class Requirement implements java.io.Serializable
{

	private static final long serialVersionUID = -1022049676216450769L;
	private Integer id;
	
	private String title;
	private boolean security;
	private boolean privacy;
	private String description;
	private String status;
	
	private int priority;
	private Project project;

	private Date dateCreated;
	private Date dateModified;
	private Set<Category> categories = new HashSet<Category>(0);
	private Set<Risk> risks = new HashSet<Risk>(0);
	private Set<Artifact> artifacts = new HashSet<Artifact>(0);
	private Set<UserAhp> userAhpsForRidA = new HashSet<UserAhp>(0);
	private Set<UserAhp> userAhpsForRidB = new HashSet<UserAhp>(0);
	private Set<Goal> goals = new HashSet<Goal>(0);


	public Requirement()
		{
		}

	public Requirement(GwtRequirement gwtRequirement)
		{
			this.id = gwtRequirement.getId();
			update(gwtRequirement);
		}
	
	public void update(GwtRequirement gwtRequirement)
	{
		
		
		this.title = gwtRequirement.getTitle();
		this.description = gwtRequirement.getDescription();
		this.privacy=gwtRequirement.isPrivacy();
		this.security = gwtRequirement.isSecurity();
		this.priority = gwtRequirement.getPriority();
		
		gwtRequirement.setStatus(this.status);
		this.status = gwtRequirement.getStatus();
		
		//System.out.println("after status is"+this.status);
		
		
		for(GwtRisk r: gwtRequirement.getRisks()) {
			this.getRisks().add(new Risk(r));
		}
		for(GwtArtifact a: gwtRequirement.getArtifacts()) {
			this.getArtifacts().add(new Artifact(a));
		}
		
		for(GwtCategory a: gwtRequirement.getCategories()) {
			this.getCategories().add(new Category(a));
		}
		for(GwtSubGoal a: gwtRequirement.getSubGoals()) {
			this.getGoals().add(new Goal(a));
		}
		
		if (gwtRequirement.getProjectID() > 0) 
		{
			this.project = new Project(gwtRequirement.getProjectID());
		}
		
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId()
	{
		return this.id;
	}

	public void setId(Integer id)
	{
		this.id = id;
	}

	@Column(name = "title", nullable = false, length = 65535)
	public String getTitle()
	{
		return this.title;
	}

	public void setTitle(String title)
	{
		this.title = title;
	}

	@Column(name = "security", nullable = false)
	public boolean isSecurity()
	{
		return this.security;
	}

	public void setSecurity(boolean security)
	{
		this.security = security;
	}

	@Column(name = "privacy", nullable = false)
	public boolean isPrivacy()
	{
		return this.privacy;
	}

	public void setPrivacy(boolean privacy)
	{
		this.privacy = privacy;
	}

	@Column(name = "description", nullable = false, length = 65535)
	public String getDescription()
	{
		return this.description;
	}

	public void setDescription(String description)
	{
		this.description = description;
	}

	@Column(name = "priority", nullable = false)
	public int getPriority()
	{
		return this.priority;
	}

	public void setPriority(int priority)
	{
		this.priority = priority;
	}
	
	@Column(name = "status", nullable = false, length = 65535)
	public String getStatus()
	{
		return this.status;
	}
	public void setStatus(String status)
	{
		this.status = status;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_created", nullable = false, length = 19)
	public Date getDateCreated()
	{
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated)
	{
		this.dateCreated = dateCreated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_modified", nullable = false, length = 19)
	public Date getDateModified()
	{
		return this.dateModified;
	}

	public void setDateModified(Date dateModified)
	{
		this.dateModified = dateModified;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "requirementByRidA")
	public Set<UserAhp> getUserAhpsForRidA()
	{
		return this.userAhpsForRidA;
	}

	public void setUserAhpsForRidA(Set<UserAhp> userAhpsForRidA)
	{
		this.userAhpsForRidA = userAhpsForRidA;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "requirementByRidB")
	public Set<UserAhp> getUserAhpsForRidB()
	{
		return this.userAhpsForRidB;
	}

	public void setUserAhpsForRidB(Set<UserAhp> userAhpsForRidB)
	{
		this.userAhpsForRidB = userAhpsForRidB;
	}
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name = "requirement_risk", joinColumns = {@JoinColumn(name = "reqid")}, inverseJoinColumns = {@JoinColumn(name = "tid")})
	public Set<Risk> getRisks()
	{
		return risks;
	}

	public void setRisks(Set<Risk> risks)
	{
		this.risks = risks;
	}
	

	/**
	 * @param project the project to set
	 */
	public void setProject(Project project)
	{
		this.project = project;
	}

	/**
	 * @return the project
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pid", nullable = false)
	public Project getProject()
	{
		return project;
	}

	/**
	 * @param categories the categories to set
	 */
	public void setCategories(Set<Category> categories)
	{
		this.categories = categories;
	}

	/**
	 * @return the categories
	 */
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name = "requirement_category", joinColumns = {@JoinColumn(name = "requirement_id")}, inverseJoinColumns = {@JoinColumn(name = "category_id")})
	public Set<Category> getCategories()
	{
		return categories;
	}

	public GwtRequirement createGwtRequirement()
	{
		
		List<GwtRisk> risks = new ArrayList<GwtRisk>();
		for(Risk r : this.risks) {
			risks.add(r.createGwtRisk());
		}
		
		List<GwtArtifact> artifacts = new ArrayList<GwtArtifact>();
		for(Artifact a : this.artifacts) {
			artifacts.add(a.createGwtArtifact());
		}
		
		List<GwtCategory> categories = new ArrayList<GwtCategory>();
		for(Category c : this.categories) {
			categories.add(c.createGwtCategory());
		}
		
		List<GwtSubGoal> goals = new ArrayList<GwtSubGoal>();
		for(Goal c : this.goals) {
			goals.add(c.createSubGoal());
		}
		
		GwtRequirement gwtRequirement = new GwtRequirement();
		gwtRequirement.setId(this.id);
		gwtRequirement.setDescription(this.description);
		//ASQUARE
		gwtRequirement.setStatus(this.status);
		gwtRequirement.setPriority(this.priority);
		gwtRequirement.setPrivacy(this.privacy);
		gwtRequirement.setProjectID(this.project!=null?this.project.getId():null);
		gwtRequirement.setTitle(this.title);
		gwtRequirement.setSecurity(this.security);
		gwtRequirement.setRisks(risks);
		gwtRequirement.setSubGoals(goals);
		gwtRequirement.setArtifacts(artifacts);
		gwtRequirement.setCategories(categories);
	
		
		return gwtRequirement;
	}

	/**
	 * @param artifacts the artifacts to set
	 */
	public void setArtifacts(Set<Artifact> artifacts)
	{
		this.artifacts = artifacts;
	}

	/**
	 * @return the artifacts
	 */
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name = "requirement_artifact", joinColumns = {@JoinColumn(name = "requirement_id")}, inverseJoinColumns = {@JoinColumn(name = "artifact_id")})
	public Set<Artifact> getArtifacts()
	{
		return artifacts;
	}

	public void setGoals(Set<Goal> goals)
	{
		this.goals = goals;
	}
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name = "requirement_goal", joinColumns = {@JoinColumn(name = "requirement_id")}, inverseJoinColumns = {@JoinColumn(name = "goal_id")})
	public Set<Goal> getGoals()
	{
		return goals;
	}

	@Override
	public String toString()
	{
		return "id: " + this.id + "  priority: " + this.priority + "  status: " + this.status;
	}

}
